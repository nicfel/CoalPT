#+TITLE: Sampler Validation

#+PROPERTY: header-args:R :exports both :tangle yes

* Simulator validation

** No reassortment

When reassortment is turned off, the simulator should draw trees from
a standard coalescent distribution. We can test this by comparing tree
heights and lengths between our simulator and the regular RandomTree
simulator under various population functions.

#+BEGIN_SRC R :file sim_validation.png :results graphics
df <- read.table("simulator/simulate_without_reassortment.log", header=T)

maxLength <- max(df$simulated_network.totalLength,
                df$simulated_tree.treeLength)
breaks <- seq(0, maxLength, length.out=50)

h1 <- hist(df$simulated_network.totalLength, plot=F,
          breaks=breaks)
h2 <- hist(df$simulated_tree.treeLength, plot=F,
          breaks=breaks)

plot(h1$mids, h1$density, 'l', col='blue',
    main="Tree length comparison (constant population size)")
lines(h2$mids, h2$density, col='red')
#+END_SRC 

#+RESULTS:
[[file:sim_validation.png]]

#+BEGIN_SRC R :file sim_validation2.png :results graphics
df <- read.table("simulator/simulate_without_reassortment_expGrowth.log", header=T)

maxLength <- max(df$simulated_network.totalLength,
                df$simulated_tree.treeLength)
breaks <- seq(0, maxLength, length.out=50)

h1 <- hist(df$simulated_network.totalLength, plot=F,
          breaks=breaks)
h2 <- hist(df$simulated_tree.treeLength, plot=F,
          breaks=breaks)

plot(h1$mids, h1$density, 'l', col='blue',
    main="Tree length comparison (exponential growth)")
lines(h2$mids, h2$density, col='red')
#+END_SRC

#+RESULTS:
[[file:sim_validation2.png]]

** Skewed reassortment
   
Need validation test for skewed reassortment model.

* Validation code

This code just computes and plots the sample distribution obtained via MCMC
for a number of summary statistics and compares this with the results of direct
simulation.

#+BEGIN_SRC R :session :results none
  doCompare <- function(dsFileName, mcmcFileName) {
      dfs <- read.table(paste0("simulator/", dsFileName), header=T)
      df <- read.table(paste0("operators/", mcmcFileName), header=T)

      # Remove 10% for burnin
      N <- dim(df)[1]
      df <- df[-(1:ceiling(0.1*N)),]

      # Tree age/length plot

      par(mfcol=c(3,1))

      maxLength <- max(quantile(df$network.totalLength, probs=0.99),
                       quantile(dfs$network.totalLength, probs=0.99),
                       quantile(df$network.height, probs=0.99),
                       quantile(dfs$network.height, probs=0.99))

      maxDensity <- max(density(dfs$network.height)$y,
                        density(df$network.height)$y,
                        density(dfs$network.totalLength)$y,
                        density(df$network.totalLength)$y)

      plot(density(df$network.height), 'l', col='red', lwd=2, lty=2,
           xlim=c(0,maxLength), ylim=c(0,maxDensity),
           xlab="Statistic", ylab="Density",
           main="")
      lines(density(dfs$network.height), col='blue', lwd=2, lty=2)
      lines(density(df$network.totalLength), col='red', lwd=2)
      lines(density(dfs$network.totalLength), col='blue', lwd=2)
      legend("topright", inset=0.05,
         c("MCMC", "Direct simulation","Network length", "Network height"),
         lty=c(1,1,1,2), lwd=2, col=c("red","blue","black","black"))

      # Network node count plot

      maxCount <- max(df$network.reassortmentNodeCount, dfs$network.reassortmentNodeCount)+1
      h <- hist(df$network.reassortmentNodeCount, plot=F,
                breaks=seq(-0.5,maxCount+0.5,by=1))
      hs <- hist(dfs$network.reassortmentNodeCount, plot=F,
                 breaks=seq(-0.5,maxCount+0.5,by=1))

      maxDensity <- max(h$density, hs$density)

      plot(h$mids, h$density, 'o', col='red', lwd=4,
          xlab="Reassortment Count",
          ylab="Posterior probability",
          ylim=c(0,maxDensity))
      lines(hs$mids, hs$density, 'o', col='blue', lwd=2)

      legend("topright", inset=0.04,
            c("MCMC", "Direct simulation"), lty=1, pch=1, lwd=2,
            col=c("red","blue"))
            
    # Kolmogorov-Smirnov test for network statistics

    H <- c()
    L <- c()
    R <- c()
    l <- length(df$network.height)
    
    # For comparison to run faster, calculations need to be done at fewer ponts.
    # It can be achieved by taking a fraction smaller than 0.01 below.
    nPoints <- round(l*0.01)
    by <- as.integer(l/nPoints)

    for (i in seq(l, 0, by=-by)){
        H <- append(H, log(ks.test(df$network.height[1:(l-i)], dfs$network.height)$statistic))
        L <- append(L, log(ks.test(df$network.totalLength[1:(l-i)], dfs$network.totalLength)$statistic))
        R <- append(L, log(ks.test(df$network.reassortmentNodeCount[1:(l-i)], dfs$network.reassortmentNodeCount)$statistic))
    }

    plot(seq(1, length(L)), L, type='l', col='red',  lwd=2,
         xlab=paste("Number of logged iterations (minus burnin) / ", by),
         ylab="Kolmogorov-Smirnov stat. (log scale)", 
         main="Kolmogorov-Smirnov test for network statistics",
         ylim=c(min(L, H, R), max(L, H, R)))

    lines(seq(1, length(H)), H, col='blue', lwd=2, lty=2)
    lines(seq(1, length(R)), R, lwd=2, lty=3)
    legend("topright", inset=0.05,
           c("Network length", "Network height", "Reassortment count"),
           lty=c(2,2, 3), lwd=2, col=c("red","blue","black"))
  }
#+END_SRC

#+RESULTS:

* Add/Remove operator

** Two-taxon two-segment networks

#+BEGIN_SRC R :session :file addRemove2taxon2seg.png :results graphics
doCompare("simulate_contemp2taxon2seg.log",
          "testAddRemove_contemp2taxon2seg.log")
#+END_SRC

#+RESULTS:
[[file:addRemove2taxon2seg.png]]

** 5-taxon 2-segment networks

#+BEGIN_SRC R :session :file addRemove5taxon2seg.png :results graphics
doCompare("simulate_serial5taxon2seg.log",
          "testAddRemove_serial5taxon2seg.log")
#+END_SRC

#+RESULTS:
[[file:addRemove5taxon2seg.png]]

** 5-taxon 3-segment networks

#+BEGIN_SRC R :session :file addRemove5taxon3seg.png :results output graphics
  doCompare("simulate_serial5taxon3seg.log",
            "testAddRemove_serial5taxon3seg.log")
#+END_SRC

#+RESULTS:
[[file:addRemove5taxon3seg.png]]
          
** 5-taxon 8-segment networks

#+BEGIN_SRC R :session :file addRemove5taxon8seg.png 
doCompare("simulate_serial5taxon8seg.log",
          "testAddRemove_serial5taxon8seg.log")
#+END_SRC

#+RESULTS:
[[file:addRemove5taxon8seg.png]]

* Uniform operator 
  
** 5-taxon 8-segment

#+BEGIN_SRC R :session :file uniform5taxon8seg.png :results graphics
doCompare("simulate_serial5taxon8seg.log",
          "testAR+Unif_serial5taxon8seg.log")
#+END_SRC

#+RESULTS:
[[file:uniform5taxon8seg.png]]

* DivertSegment operator

** 5-taxon 8-segment

#+BEGIN_SRC R :session :file divertSeg5taxon8seg.png :results graphics
doCompare("simulate_serial5taxon8seg.log",
          "testAR+DS_serial5taxon8seg.log")
#+END_SRC

#+RESULTS:
[[file:divertSeg5taxon8seg.png]]

* NetworkScale

** 5-taxon 8-segment

#+BEGIN_SRC R :session :file scale5taxon8seg.png :results graphics
doCompare("simulate_serial5taxon8seg.log",
          "testAR+NS_serial5taxon8seg.log")
#+END_SRC

#+RESULTS:
[[file:scale5taxon8seg.png]]


* NarrowExchange operator

** 5-taxon 8-segment

#+BEGIN_SRC R :session :file narrowExchange5taxon8seg.png :results graphics
doCompare("simulate_serial5taxon8seg.log",
          "testAR+NarrowExchange_serial5taxon8seg.log")
#+END_SRC

#+RESULTS:
[[narrowExchange5taxon8seg.png]]


* WideExchange operator

** 5-taxon 8-segment

#+BEGIN_SRC R :session :file wideExchange5taxon8seg.png :results graphics
doCompare("simulate_serial5taxon8seg.log",
          "testAR+WideExchange_serial5taxon8seg.log")
#+END_SRC

#+RESULTS:
[[wideExchange5taxon8seg.png]]


* Slide operator

** 5-taxon 8-segment

#+BEGIN_SRC R :session :file slide5taxon8seg.png :results graphics
doCompare("simulate_serial5taxon8seg.log",
          "testAR+Slide_serial5taxon8seg.log")
#+END_SRC

#+RESULTS:
[[slide5taxon8seg.png]]


* All above network operators

** 5-taxon 8-segment

#+BEGIN_SRC R :session :file all5taxon8seg.png :results graphics
doCompare("simulate_serial5taxon8seg.log",
          "testAll_serial5taxon8seg_1e8iter.log")
#+END_SRC

#+RESULTS:
[[all5taxon8seg.png]]
